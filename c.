#include <stdio.h>
#include <stdint.h>  // Para uint32_t e uint64_t
#include <math.h>

/*
 * Autor: Gabriela Isabel C Silva
 * E-mail: gabiisa449@gmail.com
 * Data de Criação: 13/09/2024 - 10:30
 * Última Modificação: 15/09/2024 - 13:00
 * Descrição: Calculadora programador didática para conversões de bases e real (float/double).
 * 
 * Revisões:
 * 13/09/2024 - 10:30 - Criação do código para conversão de bases (binário, octal, hexadecimal, BCD).
 * 13/09/2024 - 12:50 - Implementação da conversão de float para bits, incluindo sinal, expoente e fração.
 * 15/09/2024 - 8:20 - Ajuste na função de conversão de double para mostrar sinal, expoente e fração corretamente.
 * 15/09/2024 - 13:00 - Revisão final e ajustes nas funções de conversão e exibição de bits.
 */

// Função para converter decimal para binário
void decimalParaBinario(int num) {
    if (num == 0) {
        printf("Binário: 0\n");
        return;
    }
    int bits[32] = {0};
    int i = 0;
    while (num > 0) {
        bits[i++] = num % 2;
        num = num / 2;
    }
    printf("Binário: ");
    for (i = i - 1; i >= 0; i--) {
        printf("%d", bits[i]);
    }
    printf("\n");
}

// Função para converter decimal para octal
void decimalParaOctal(int num) {
    if (num == 0) {
        printf("Octal: 0\n");
        return;
    }
    int octal[32] = {0};
    int i = 0;
    while (num > 0) {
        octal[i++] = num % 8;
        num = num / 8;
    }
    printf("Octal: ");
    for (i = i - 1; i >= 0; i--) {
        printf("%d", octal[i]);
    }
    printf("\n");
}

// Função para converter decimal para hexadecimal
void decimalParaHexadecimal(int num) {
    if (num == 0) {
        printf("Hexadecimal: 0\n");
        return;
    }
    char hex[32] = {0};
    int i = 0;
    while (num > 0) {
        int rem = num % 16;
        if (rem < 10) {
            hex[i] = rem + '0';
        } else {
            hex[i] = rem - 10 + 'A';
        }
        num = num / 16;
        i++;
    }
    printf("Hexadecimal: ");
    for (i = i - 1; i >= 0; i--) {
        printf("%c", hex[i]);
    }
    printf("\n");
}

// Função para converter decimal para BCD
void decimalParaBCD(int num) {
    int bcd[10] = {0};  // Supondo que o número tem até 10 dígitos
    int i = 0;

    // Armazena cada dígito no array bcd
    while (num > 0) {
        bcd[i++] = num % 10;
        num = num / 10;
    }

    printf("Código BCD: ");
    // Imprime os dígitos em ordem correta
    for (int j = i - 1; j >= 0; j--) {
        int digit = bcd[j];
        for (int k = 7; k >= 0; k--) {
            printf("%d", (digit >> k) & 1);
        }
        printf(" ");
    }
    printf("\n");
}

// Função para exibir a representação binária de um float
void exibirFloatBits(float num) {
    uint32_t bits = *((uint32_t*)&num);
    printf("Float:\n");
    printf("Bits: ");
    for (int i = 31; i >= 0; i--) {
        printf("%d", (bits >> i) & 1);
    }
    printf("\n");
    printf("Sinal: %d\n", (bits >> 31) & 1);
    uint32_t expoente = (bits >> 23) & 0xFF;
    printf("Expoente (com viés 127): %d\n", expoente);
    printf("Fração: ");
    for (int i = 22; i >= 0; i--) {
        printf("%d", (bits >> i) & 1);
    }
    printf("\n");
}

// Função para exibir a representação binária de um double
void exibirDoubleBits(double num) {
    uint64_t bits = *((uint64_t*)&num);
    uint64_t sinal = (bits >> 63) & 1;
    uint64_t expoente = (bits >> 52) & 0x7FF;
    uint64_t frac = bits & 0xFFFFFFFFFFFFF;

    printf("Representação binária do double:\n");
    printf("Sinal: %lu\n", sinal);
    printf("Expoente (com viés 1023): %lu\n", expoente);
    printf("Fração: 0x%lX\n", frac);
    printf("Bits: ");
    for (int i = 63; i >= 0; i--) {
        printf("%lu", (bits >> i) & 1);
    }
    printf("\n");
}

int main() {
    int decimal = 123;
    float f = 5.75;
    double d = 3.14;

    // Conversões de decimal
    decimalParaBinario(decimal);
    decimalParaOctal(decimal);
    decimalParaHexadecimal(decimal);
    decimalParaBCD(decimal);

    // Conversões de float e double
    exibirFloatBits(f);
    exibirDoubleBits(d);

    return 0;
}
